#To use one of them, refer to them elsewhere in script via "value:<value>" e.g. value:example_value
#IMPORTANT NOTE: Be mindful of performance when using these in triggers that are checked often!
# example_value = {
# 	base = 10 #default: 0
# 	# List of valid mathematical operations:
# 	# 	Numerical (modifying by a number):
# 	# 	- set/weight (both do the same, replaces the current result with this value)
# 	# 	- add
# 	# 	- subtract
# 	# 	- factor/mult/multiply ("multiply" fits the name scheme of the rest better, but the other two were kept for historical reasons)
# 	# 	- divide
# 	# 	- modulo
# 	# 	- round_to (rounds to nearest of that value, e.g. 10.7 round_to 5 gives you 10)
# 	# 	- max (sets to specified value if currently above it)
# 	# 	- min (sets to specified value if currently below it)
# 	# 	- pow (value is multiplied by itself to the power of x; be careful, you can get overflows if you are not careful)
# 	# 	Simple (do not need a number, but just "yes", e.g. "round = yes")
# 	# 	- round (sets to nearest full number)
# 	# 	- ceiling (rounds up)
# 	# 	- floor (rounds down)
# 	# 	- abs (multiply by -1 if negative)
# 	# 	- square (multiply by itself)
# 	# 	- square_root
# 	#All mathematical operations except weight and factor can be used inline e.g.
# 	add = 100
# 	multiply = value:some_other_script_value
# 	round = yes
# 	#(Note: weight and factor will instead overwrite the base value - use set, mult or multiply instead)
# 	#They can also be used in modifier = {} fields, which lets you only apply them if triggers are true
# 	modifier = {
# 		max = owner.max_example_variable 					#Variable set by set_variable
# 		owner = { is_variable_set = max_example_variable }	#Only applied if this trigger is true
# 	}
# 	# What works for right hand side values of mathematical operations? See events/00_how_to_use_variables for full list.
# 	complex_trigger_modifier = { 	#This lets you get the value of a trigger that you can't use in one-liners because it uses {}
# 		trigger = count_owned_planet
# 		trigger_scope = owner 		#Lets you get the result of the trigger on a different scope. Default is "this"
# 		parameters = { 				#Stick any further information necessary in here, like you'd do within the {} of the trigger normally
# 			limit = { num_pops > 10 }
# 		}
# 		mode = add 					#Allows all numerical operations
# 		mult = 5 					#Multiplies the outcome by this. In this example, this means adding 5 for each planet with more than 10 pops
# 	}
# }
# Final note: script_values use the same metascript system as scripted_triggers and scripted_effects
# This means that you can input parameters into them, in a similar fashion as described in scripted_effects/99_advanced_documentation.txt
# For format for doing so is value:my_value|PARAM1|value1|PARAM2|value2|.
# Then you can use $PARAM1$ in the script value and it will replace it with value1
########   岗位
num_BA_count_jobs = {
	complex_trigger_modifier = {
		trigger = num_assigned_jobs
		parameters = {
			job = $Job$
		}
		mode = add
	}
}

########   星球障碍
num_BA_Trinity_National_Museum_produce = {
	base = 30
	complex_trigger_modifier = {
		trigger = years_passed
		mode = add
		multiplier = 0.5
	}
}

########   社团
num_BA_club_game_produce = {
	base = 15
	min = 15
	### 人口
	complex_trigger_modifier = {
		trigger = count_owned_pop
		parameters = {
			limit = {
				is_kivotos = yes
			}
		}
		mode = add
		multiplier = 0.5
	}
	## 建筑
	complex_trigger_modifier = {
		trigger = count_owned_planet
		parameters = {
			limit = {
				has_active_building = building_BA_Schale_office
			}
		}
		mode = add
		multiplier = 5
	}
	complex_trigger_modifier = {
		trigger = count_owned_planet
		parameters = {
			limit = {
				has_active_building = building_BA_Game_development_department
			}
		}
		mode = add
		multiplier = 15
	}
	### 自动变更
	add = Game_development_department_unity
	### 学策
	modifier = {
		factor = 2
		has_technology = tech_BA_SI_Millennium_C02
	}
}

num_BA_club_resource_by_empire_size = {
	base = -100
	modifier = {
		add = trigger:empire_size
	}
	multiply = 0.002
	add = 1
}

num_BA_club_weapon_boost_cost = {
	base = 10
	add = BA_weapon_var_count
	multiply = 10000
}

num_BA_club_weapon_boost_prev = {
	base = 10
	add = BA_weapon_var_count
	add = BA_weapon_var_prev
	multiply = 10000
}

########   学园理念
num_BA_SI_available = {
	add = BA_SI_cost
	divide = 48
	floor = yes
	min = 0
}

num_BA_SI_next_idea = {
	add = BA_SI_cost
	modulo = 48
	subtract = 48
	abs = yes
	ceiling = yes
	min = 0
}

########   自动化居住站
### 最大区划数
# 小模块+0.5，通常、科研模块+1.5，其他模块+1
num_BA_auto_habitat_module_max_districts = {
	base = 0
	complex_trigger_modifier = {
		trigger = count_fleet_in_system
		parameters = {
			limit = {
				has_fleet_flag = BA_minor_module
			}
		}
		mult = 0.5
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_fleet_in_system
		parameters = {
			limit = {
				OR = {
					has_fleet_flag = BA_normal_module
					has_fleet_flag = BA_research_module
				}
			}
		}
		mult = 1.5
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_fleet_in_system
		parameters = {
			limit = {
				OR = {
					has_fleet_flag = BA_energy_module
					has_fleet_flag = BA_mineral_module
				}
			}
		}
		mult = 1
		mode = add
	}
}

### 最大建筑槽位
# 基础+1，通常模块+1，科研模块不增加，其他模块+0.5
num_BA_auto_habitat_module_max_buildings = {
	base = 1
	complex_trigger_modifier = {
		trigger = count_fleet_in_system
		parameters = {
			limit = {
				has_fleet_flag = BA_normal_module
				#is_ship_size = ship_BA_auto_habitat_generic
			}
		}
		mult = 1
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_fleet_in_system
		parameters = {
			limit = {
				OR = {
					is_ship_size = ship_BA_auto_habitat_minor
					is_ship_size = ship_BA_auto_habitat_generic
				}
				NOR = {
					has_fleet_flag = BA_research_module
					has_fleet_flag = BA_normal_module
				}
				#is_ship_size = ship_BA_auto_habitat_generic
			}
		}
		mult = 0.5
		mode = add
	}
}

### 矩阵区上限
# 基础+1，通常模块+1，研究模块+3
num_BA_auto_habitat_max_matrix = {
	base = 1
	complex_trigger_modifier = {
		trigger = count_fleet_in_system
		parameters = {
			limit = {
				has_fleet_flag = BA_research_module
				#is_ship_size = ship_BA_auto_habitat_generic
			}
		}
		mult = 3
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_fleet_in_system
		parameters = {
			limit = {
				is_ship_size = ship_BA_auto_habitat_generic
				NOT = {
					has_fleet_flag = BA_research_module
				}
				#is_ship_size = ship_BA_auto_habitat_generic
			}
		}
		mode = add
	}
}

### 涡轮区上限
# 发电模块+3
num_BA_auto_habitat_max_turbine = {
	base = 0
	complex_trigger_modifier = {
		trigger = count_fleet_in_system
		parameters = {
			limit = {
				has_fleet_flag = BA_energy_module
			}
		}
		mult = 3
		mode = add
	}
}

### 钻探区上限
# 采矿模块+3
num_BA_auto_habitat_max_drill = {
	base = 0
	complex_trigger_modifier = {
		trigger = count_fleet_in_system
		parameters = {
			limit = {
				has_fleet_flag = BA_mineral_module
			}
		}
		mult = 3
		mode = add
	}
}
